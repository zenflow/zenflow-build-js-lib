// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ecmascript-features snapshot 1`] = `
"/** @preserve
  * package: ecmascript-features-fixture v0.0.0
  * file: dist/ecmascript-features-fixture.cjs.js
  **/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step(\\"next\\", value);
          }, function (err) {
            step(\\"throw\\", err);
          });
        }
      }

      return step(\\"next\\");
    });
  };
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var objectSpread = _extends({ foo: 'bar' }, { bar: 'foo' });

var _this = undefined;

var asyncFn = function () {
  var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', 'foo');

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this);
  }));

  return function asyncFn() {
    return _ref.apply(this, arguments);
  };
}();

var array = [1, 2, 3];

var arrayIncludes = [array.includes(2), [1, 2, 3].includes(2)];

var _this$1 = undefined;

var foo = function () {
  var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', 'bar');

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this$1);
  }));

  return function foo() {
    return _ref.apply(this, arguments);
  };
}();

var bar = [1, 2, 3].includes(2);

var random = _extends({ foo: foo }, { bar: bar });

exports.objectSpread = objectSpread;
exports.asyncFn = asyncFn;
exports.arrayIncludes = arrayIncludes;
exports.random = random;
"
`;
